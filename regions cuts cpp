class Solution {
public:
   int regionsBySlashes(vector<string> &grid)
  {
      int n=grid.size();
      int dots=n+1;
      
      par.resize(dots*dots);
      rank.resize(dots*dots);
      count=1;
      
      for(int i=0;i<par.size();i++)
      {
          par[i]=i;
          rank[i]=1;
      }
      
      for(int i=0;i<dots;i++)
      {
          for(int j=0;j<dots;j++)
          {
              if(i==0 || j==0 || i==dots-1 || j==dots-1)
              {
                  int cellno=i*dots + j;
                  
                  if(cellno!=0)
                    union1(0,cellno);
              }
          }
      }
      
      for(int i=0;i<grid.size();i++)
      {
          vector<char> ch;
            strcpy(ch, grid[i].c_str());
          for(int j=0;j<ch.size();j++)
          {
              if(ch[j]=='/')
              {
                  int cellno1=i*dots+j+1;
                  int cellno2=(i+1)*dots+j;
                  union1(cellno1, cellno2);
              }
              else if(ch[j]=='\\')
              {
                  int cellno1=i*dots+j;
                  int cellno2=(i+1)*dots+(j+1);
                  union1(cellno1, cellno2);
              }
          }
      }
      return count;
  }
  
  vector<int> par;
  vector<int> rank;
  int count;
  
  int find(int x)
  {
      if(par[x]==x)
      {
          return x;
      }
      int temp=find(par[x]);
      par[x]=temp;
      return temp;
  }
  
  void union1(int x, int y)
  {
      int lx=find(x);
      int ly=find(y);
      
      if(lx!=ly)
      {
          if(rank[lx]>rank[ly])
          {
              par[ly]=lx;
          }
          else if(rank[lx]<rank[ly])
          {
              par[lx]=ly;
          }
          else{
              par[lx]=ly;
              rank[ly]++;
          }
      }
      else
      {
          count++;
      }
  }
};
